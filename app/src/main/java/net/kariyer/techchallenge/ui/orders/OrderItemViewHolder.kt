package net.kariyer.techchallenge.ui.orders

import net.kariyer.techchallenge.R
import net.kariyer.techchallenge.data.entitiy.Product
import net.kariyer.techchallenge.data.entitiy.ProductState
import net.kariyer.techchallenge.data.entitiy.ProductViewState
import net.kariyer.techchallenge.databinding.ItemOrderBinding
import net.kariyer.techchallenge.ui.base.BaseViewHolder
import net.kariyer.techchallenge.util.*
import java.text.DateFormatSymbols

class OrderItemViewHolder : BaseViewHolder {

    private val binding: ItemOrderBinding //ItemOrderBinding class generated by data binding mechanism automatically
    var itemCallback: OrderItemCallback? = null
    var stateChangeCallback: OrderItemStateCallback? = null
    private var viewSate: ProductViewState = ProductViewState.DEFAULT

    constructor(binding: ItemOrderBinding) : super(binding.root) {
        this.binding = binding
    }

    override fun bind(item: Any) {

        val orderItem = item as Product

        //We put the values come from adapter to the related views
        binding.let {
            it.textViewDate.text = orderItem.date
            it.textViewMonth.text = DateFormatSymbols().getMonthName(orderItem.month)
            it.textViewMarketName.text = orderItem.marketName
            it.textViewOrderName.text = orderItem.orderName
            it.textViewPrice.text = "${orderItem.productPrice} TL"
            it.textViewOrderState.text = orderItem.productState
            it.textViewOrderDetail.text = orderItem.productDetail.orderDetail
            it.textViewSummaryPrice.text = "${orderItem.productDetail.summaryPrice} TL"

            //We change the property of views according to the product state
            when (item.productState) {
                ProductState.HAS_BEEN_SHIPPED.value -> {
                    it.textViewOrderState.setTextColorByRes(R.color.green)
                    it.viewRectangle.setBackgroundColorByRes(R.color.green)
                }
                ProductState.PREPARING.value -> {
                    it.textViewOrderState.setTextColorByRes(R.color.yellow)
                    it.viewRectangle.setBackgroundColorByRes(R.color.yellow)
                }
                ProductState.WAITING_FOR_APPROVAL.value -> {
                    it.textViewOrderState.setTextColorByRes(R.color.red)
                    it.viewRectangle.setBackgroundColorByRes(R.color.red)
                }
            }

            it.root.setOnClickListener {

                if (viewSate == ProductViewState.DEFAULT) {
                    itemCallback?.onItemClick(item.orderName)
                    viewSate = ProductViewState.EXPANDED
                    binding.layoutDetail.visible()
                } else {
                    viewSate = ProductViewState.DEFAULT
                    binding.layoutDetail.gone()
                }

                //We notify the state changes to the adapter
                stateChangeCallback?.onStateChanged(adapterPosition, viewSate)
            }
        }
    }


    fun setViewState(viewState: ProductViewState) {

        this.viewSate = viewState

        if (viewState == ProductViewState.DEFAULT)
            binding.layoutDetail.gone()
        else
            binding.layoutDetail.visible()
    }
}
